
public struct {{classname}}: Codable {

{{#allVars}}
{{#isEnum}}
{{> modelInlineEnumDeclaration}}
{{/isEnum}}
{{/allVars}}
{{#allVars}}
{{#isEnum}}
    {{#description}}/** {{description}} */
    {{/description}}public var {{name}}: {{{datatypeWithEnum}}}{{^required}}?{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}
{{/isEnum}}
{{^isEnum}}
    {{#description}}/** {{description}} */
    {{/description}}public var {{name}}: {{{datatype}}}{{^required}}?{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{#objcCompatible}}{{#vendorExtensions.x-swift-optional-scalar}}
    public var {{name}}Num: NSNumber? {
        get {
            return {{name}}.map({ return NSNumber(value: $0) })
        }
    }{{/vendorExtensions.x-swift-optional-scalar}}{{/objcCompatible}}
{{/isEnum}}
{{/allVars}}

{{#hasVars}}
    public init({{#allVars}}{{name}}: {{{datatypeWithEnum}}}{{^required}}?{{/required}}{{#hasMore}}, {{/hasMore}}{{/allVars}}) {
        {{#allVars}}
        self.{{name}} = {{name}}
        {{/allVars}}
    }
{{/hasVars}}
{{#additionalPropertiesType}}
    public var additionalProperties: [String:{{{additionalPropertiesType}}}] = [:]

    public subscript(key: String) -> {{{additionalPropertiesType}}}? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }
{{/additionalPropertiesType}}

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        {{#allVars}}
        try container.encode{{^required}}IfPresent{{/required}}({{{name}}}, forKey: "{{{baseName}}}")
        {{/allVars}}
        {{#additionalPropertiesType}}
        try container.encodeMap(additionalProperties)
        {{/additionalPropertiesType}}
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

{{#allVars}}
    {{#isLong}}
        {{#required}}
        do {
            let sValue = try container.decode(String.self, forKey: "{{{baseName}}}")
            guard let int64Value = Int64(sValue) else {
                throw DecodingError.dataCorruptedError(
                    forKey: "{{{baseName}}}",
                    in: container,
                    debugDescription: "Can't parse Int64 from String"
                )
            }
            {{name}} = int64Value
        } catch {
            {{name}} = try container.decode(Int64.self, forKey: "{{{baseName}}}")
        }
        {{/required}}
        {{^required}}
        do {
            if let sValue = try container.decodeIfPresent(String.self, forKey: "{{{baseName}}}") {
                guard let int64Value = Int64(sValue) else {
                    throw DecodingError.dataCorruptedError(
                        forKey: "{{{baseName}}}",
                        in: container,
                        debugDescription: "Can't parse Int64 from String"
                    )
                }
                {{name}} = int64Value
            } else {
                {{name}} = nil
            }
        } catch {
            {{name}} = try container.decodeIfPresent(Int64.self, forKey: "{{{baseName}}}")
        }
        {{/required}}
    {{/isLong}}
    {{^isLong}}
    {{#isListContainer}}
    {{#items.isLong}}
        {{#required}}
        do {
            let sArray = try container.decode([String].self, forKey: "{{{baseName}}}")
            {{name}} = try sArray.map { sValue in
                guard let int64Value = Int64(sValue) else {
                    throw DecodingError.dataCorruptedError(
                        forKey: "{{{baseName}}}",
                        in: container,
                        debugDescription: "Can't parse Int64 from String"
                    )
                }
                return int64Value
            }
        } catch {
            {{name}} = try container.decode([Int64].self, forKey: "{{{baseName}}}")
        }
        {{/required}}
        {{^required}}
        do {
            if let sArray = try container.decodeIfPresent([String].self, forKey: "{{{baseName}}}") {
                {{name}} = try sArray.map { sValue in
                    guard let int64Value = Int64(sValue) else {
                        throw DecodingError.dataCorruptedError(
                            forKey: "{{{baseName}}}",
                            in: container,
                            debugDescription: "Can't parse Int64 from String"
                        )
                    }
                    return int64Value
                }
            }
        } catch {
            {{name}} = try container.decodeIfPresent([Int64].self, forKey: "{{{baseName}}}")
        }
        {{/required}}
    {{/items.isLong}}
    {{^items.isLong}}
        {{name}} = try container.decode{{^required}}IfPresent{{/required}}([{{{items.datatypeWithEnum}}}].self, forKey: "{{{baseName}}}")
    {{/items.isLong}}
    {{/isListContainer}}
    {{^isListContainer}}
        {{name}} = try container.decode{{^required}}IfPresent{{/required}}({{{datatypeWithEnum}}}.self, forKey: "{{{baseName}}}")
    {{/isListContainer}}
    {{/isLong}}
{{/allVars}}
    {{#additionalPropertiesType}}
        var nonAdditionalPropertyKeys = Set<String>()
        {{#allVars}}
        nonAdditionalPropertyKeys.insert("{{{baseName}}}")
        {{/allVars}}
        additionalProperties = try container.decodeMap({{{additionalPropertiesType}}}.self, excludedKeys: nonAdditionalPropertyKeys)
    {{/additionalPropertiesType}}
    }

{{^additionalPropertiesType}}{{#vendorExtensions.x-codegen-has-escaped-property-names}}
    public enum CodingKeys: String, CodingKey { {{#allVars}}
        case {{name}}{{#vendorExtensions.x-codegen-escaped-property-name}} = "{{{baseName}}}"{{/vendorExtensions.x-codegen-escaped-property-name}}{{/allVars}}
    }
{{/vendorExtensions.x-codegen-has-escaped-property-names}}{{/additionalPropertiesType}}

}
